---

- name: Check whether bootstrap token exists 
  stat:
    path: "{{state_dir}}/credentials/bootstrap_token"
  register: bootstrap_token_file
- name: Create bootstrap token if it does not yet exist
  shell: |
    tokenID=$(head -c 16 /dev/random  | od -An -t x2 |  tr -d "\n " | head -c 6)
    tokenSecret=$(head -c 16 /dev/random  | od -An -t x2 |  tr -d "\n " | head -c 16)
    echo "$tokenID.$tokenSecret" > {{state_dir}}/credentials/bootstrap_token
  when: bootstrap_token_file.stat.exists == false
- name: Read bootstrap token 
  shell:
    cat {{state_dir}}/credentials/bootstrap_token
  register: 
    bootstrap_token_out 
- name: Remember bootstrap token  as fact for later use 
  set_fact:
    bootstrap_token: "{{bootstrap_token_out.stdout}}"
- name: Split into token ID and token secret
  set_fact:
    token_id: "{{bootstrap_token[0:6]}}"
    token_secret: "{{bootstrap_token[7:23]}}"

- name: Create manifest for bootstrap token secret
  template: 
    src: bootstrapTokenSecret.yaml.j2
    dest: "{{state_dir}}/credentials/bootstrapTokenSecret.yaml"


# 
# Next we create all key pairs that we need
#
- name: Generate all needed OpenSSL keys
  openssl_privatekey:
    path: "{{state_dir}}/{{item}}"
    size: 2048
  loop:
    - ca/etcd_ca.rsa
    - ca/k8s_ca.rsa
    - ca/proxy_ca.rsa
    - k8s_certs/apiserver_etcd_client.rsa
    - k8s_certs/etcd_server.rsa
    - k8s_certs/apiserver.rsa
    - k8s_certs/apiserver_kubelet_client.rsa
    - k8s_certs/sa.rsa
    - k8s_certs/front_proxy_client.rsa
    - k8s_certs/admin_client.rsa
    - k8s_certs/controller_manager.rsa
    - k8s_certs/controller_apiserver_client.rsa
    - k8s_certs/scheduler.rsa
    - k8s_certs/scheduler_client.rsa
    - k8s_certs/kubelet.rsa

# 
# We known create CSRs and certificates for all our CAs
#    
- name: Generate CA certificate signing requests
  openssl_csr:
    path: "{{item.path}}.csr"    
    privatekey_path: "{{item.path}}.rsa"
    common_name: "{{item.cn}}"
    key_usage:
        - digitalSignature
        - keyCertSign 
        - cRLSign
    key_usage_critical: yes
    basic_constraints: 
        - CA:TRUE
    basic_constraints_critical: yes
    use_common_name_for_san: false
  loop:
    - cn: "etcd CA"
      path: "{{state_dir}}/ca/etcd_ca"
    - cn: "Kubernetes CA"
      path: "{{state_dir}}/ca/k8s_ca"
    - cn: "Proxy Root CA"
      path: "{{state_dir}}/ca/proxy_ca"
  loop_control:
    label: "{{ item.cn }}"

- name: Generate self-signed CA certificates from these requests
  openssl_certificate:
    path: "{{item.path}}.crt"    
    privatekey_path: "{{item.path}}.rsa"
    csr_path: "{{item.path}}.csr"
    provider: selfsigned
  loop:
    - cn: "etcd CA"
      path: "{{state_dir}}/ca/etcd_ca"
    - cn: "Kubernetes CA"
      path: "{{state_dir}}/ca/k8s_ca"
    - cn: "Proxy Root CA"
      path: "{{state_dir}}/ca/proxy_ca"
  loop_control:
    label: "{{ item.cn }}"

#
# Now we create all required CSRs
#      
- name: Create certificate signing requests for client certificates 
  openssl_csr:
    path: "{{item.path}}.csr"    
    privatekey_path: "{{item.path}}.rsa"    
    common_name: "{{item.cn}}"
    organization_name: "{{item.o}}"
    basic_constraints: "CA:FALSE"
    basic_constraints_critical: true
    extended_key_usage: "clientAuth"
    key_usage: 
      - digitalSignature
      - keyEncipherment
    useCommonNameForSAN: false
  loop:
    - cn: "kube-apiserver-etcd-client"
      o: "system:masters"
      path: "{{state_dir}}/k8s_certs/apiserver_etcd_client"
    - cn: "kube-apiserver-kubelet-client"
      o: "system:masters"
      path: "{{state_dir}}/k8s_certs/apiserver_kubelet_client"
    - cn: "front-proxy-client"
      o: "Kubernetes"
      path: "{{state_dir}}/k8s_certs/front_proxy_client"
    - cn: "kubernetes-admin"
      o: "system:masters"
      path: "{{state_dir}}/k8s_certs/admin_client"
    - cn: "system:kube-controller-manager"
      o: ""
      path: "{{state_dir}}/k8s_certs/controller_apiserver_client"
    - cn: "system:kube-scheduler"
      o: ""
      path: "{{state_dir}}/k8s_certs/scheduler_client"
  loop_control:
    label: "{{ item.cn }}"

#
# Issue all certificates
#
- name: Create certificates from CSRs
  openssl_certificate:
    path: "{{item.path}}.crt"    
    csr_path: "{{item.path}}.csr"
    provider: ownca
    ownca_path: "{{state_dir}}/ca/{{item.ca}}.crt"
    ownca_privatekey_path: "{{state_dir}}/ca/{{item.ca}}.rsa"
  loop:
    - path: "{{state_dir}}/k8s_certs/apiserver_etcd_client"
      ca: etcd_ca
    - path: "{{state_dir}}/k8s_certs/apiserver_kubelet_client"
      ca: k8s_ca
    - path: "{{state_dir}}/k8s_certs/front_proxy_client"
      ca: proxy_ca
    - path: "{{state_dir}}/k8s_certs/admin_client"
      ca: k8s_ca
    - path: "{{state_dir}}/k8s_certs/controller_apiserver_client"
      ca: k8s_ca
    - path: "{{state_dir}}/k8s_certs/scheduler_client"
      ca: k8s_ca
  loop_control:
    label: "{{ item.path }}"


- name: Create certificate signing requests for etcd
  openssl_csr:
    path: "{{item.path}}.csr"    
    privatekey_path: "{{item.path}}.rsa"    
    common_name: "{{item.cn}}"
    basic_constraints: "CA:FALSE"
    basic_constraints_critical: true
    useCommonNameForSAN: false
    subject_alt_name: 
      - IP:{{item.ip}}
      - DNS:{{item.dns}}
    key_usage: 
        - digitalSignature
        - keyEncipherment    
    extended_key_usage:
        - clientAuth        
        - serverAuth
  loop:
    - cn: "etcd"
      path: "{{state_dir}}/k8s_certs/etcd_server"
      ip: "{{hostvars.master.node_ip}}"
      dns: "master"

- name: Create certificate signing request for Kubernetes API server
  openssl_csr:
    common_name: "kube-apiserver"
    email_address: "kube_apiserver@leftasexercise.com"
    organization_name: "system:masters"
    use_common_name_for_san: false
    key_usage: 
        - digitalSignature
        - keyEncipherment
    subject_alt_name: 
        - "IP:{{hostvars.master.node_ip}}"
        - "IP:{{service_cidr_gateway}}"
        - "IP:{{os.access_node.ip}}"
        - "DNS:master"
        - "IP:{{hostvars.master.floating_ip}}"
    path: "{{state_dir}}/k8s_certs/apiserver.csr"
    privatekey_path: "{{state_dir}}/k8s_certs/apiserver.rsa"


- name: Create certificate signing request for Kubelet - one for each node
  openssl_csr:
    common_name: "kubelet-server"
    use_common_name_for_san: false
    key_usage: 
      - digitalSignature
      - keyEncipherment
    subject_alt_name: 
      - "IP:{{item[1].node_ip}}"
      - "DNS:{{item[0]}}"
    path: "{{state_dir}}/k8s_certs/kubelet-{{item[0]}}.csr"
    privatekey_path: "{{state_dir}}/k8s_certs/kubelet.rsa"
  loop:
    "{{ hostvars.items() | list }}"
  loop_control:
    label: "{{ item[0] }}"
  when: 
    item[1].group_names[0] == "worker_nodes"

- name: Create certificate signing requests for other control plane components
  openssl_csr:
    path: "{{item.path}}.csr"    
    privatekey_path: "{{item.path}}.rsa"    
    common_name: "{{item.cn}}"
    basic_constraints: "CA:FALSE"
    basic_constraints_critical: true
    useCommonNameForSAN: false
    subject_alt_name: 
      - IP:{{item.ip}}
    key_usage: 
        - digitalSignature
        - keyEncipherment    
    extended_key_usage:
        - serverAuth
  loop:
    - cn: "kube-controller-manager"
      path: "{{state_dir}}/k8s_certs/controller_manager"
      ip: "{{hostvars.master.node_ip}}"
    - cn: "kube-scheduler"
      path: "{{state_dir}}/k8s_certs/scheduler"
      ip: "{{hostvars.master.node_ip}}"

#
# Issue all certificates
#
- name: Create certificates from CSRs
  openssl_certificate:
    path: "{{item.path}}.crt"    
    csr_path: "{{item.path}}.csr"
    provider: ownca
    ownca_path: "{{state_dir}}/ca/{{item.ca}}.crt"
    ownca_privatekey_path: "{{state_dir}}/ca/{{item.ca}}.rsa"
  loop:
    - path: "{{state_dir}}/k8s_certs/etcd_server"
      ca: etcd_ca 
    - path: "{{state_dir}}/k8s_certs/apiserver"
      ca: k8s_ca 
    - path: "{{state_dir}}/k8s_certs/controller_manager"
      ca: k8s_ca
    - path: "{{state_dir}}/k8s_certs/scheduler"
      ca: k8s_ca

- name: Create certificates for Kubelet
  openssl_certificate:
    path: "{{state_dir}}/k8s_certs/kubelet-{{item[0]}}.crt"    
    csr_path: "{{state_dir}}/k8s_certs/kubelet-{{item[0]}}.csr"
    provider: ownca
    ownca_path: "{{state_dir}}/ca/k8s_ca.crt"
    ownca_privatekey_path: "{{state_dir}}/ca/k8s_ca.rsa"
  loop:
    "{{ hostvars.items() | list }}"
  loop_control:
    label: "{{ item[0] }}"
  when: 
    item[1].group_names[0] == "worker_nodes"

