---
# First we create the credentials. If there is already a file with the
# credentials in place, we leave it alone as the credentials therein
# are most likely already in use
- name: Check if credentials.yaml exists
  stat:
    path: "{{state_dir}}/credentials/credentials.yaml"
  register: credentials_yaml
- name: Create secure MariaDB password
  shell:
    pwgen -1
  register: pwgen_mariadb
  when: credentials_yaml.stat.exists == False
- name: Create secure OS password
  shell:
    pwgen -1
  register: pwgen_os
  when: credentials_yaml.stat.exists == False
  # Make this 32 bytes long, so that we also use it as a fernet key
- name: Create shared secrent for metadata agent
  shell:
    pwgen -1 32
  register: pwgen_metadata
  when: credentials_yaml.stat.exists == False
- name: Create secure k8s user password
  shell:
    pwgen -1
  register: pwgen_k8s  
  when: credentials_yaml.stat.exists == False
- name: Create credentials
  template:
    dest: "{{state_dir}}/credentials/credentials.yaml"
    force: no
    src: "credentials.yaml.j2"
  when: credentials_yaml.stat.exists == False

# Now we create the needed SSH key pairs and place it in the
# credentials directory
- name: Create key pairs locally
  openssh_keypair:
    path: "{{state_dir}}/ssh/{{item}}"
    size: 4096
    type: rsa
    state: present
  loop:
    - os-default-key
    - amphora-key
# 
# Next we create all key pairs that we need
#
- name: Generate all needed OpenSSL keys
  openssl_privatekey:
    path: "{{state_dir}}/{{item}}"
    size: 2048
  loop:
    - ca/os_ca.rsa 
    - ca/octavia_ca.rsa
    - os_certs/os_client.rsa
    - os_certs/nginx.rsa
# 
# We known create CSRs and certificates for all our CAs
#    
- name: Generate CA certificate signing requests
  openssl_csr:
    path: "{{item.path}}.csr"    
    privatekey_path: "{{item.path}}.rsa"
    common_name: "{{item.cn}}"
    key_usage:
        - digitalSignature
        - keyCertSign 
        - cRLSign
    key_usage_critical: yes
    basic_constraints: 
        - CA:TRUE
    basic_constraints_critical: yes
    use_common_name_for_san: false
  loop:
    - cn: "OpenStack CA"
      path: "{{state_dir}}/ca/os_ca"
    - cn: "Octavia CA"
      path: "{{state_dir}}/ca/octavia_ca"
  loop_control:
    label: "{{ item.cn }}"


- name: Generate self-signed CA certificates from these requests
  openssl_certificate:
    path: "{{item.path}}.crt"    
    privatekey_path: "{{item.path}}.rsa"
    csr_path: "{{item.path}}.csr"
    provider: selfsigned
  loop:
    - cn: "OpenStack CA"
      path: "{{state_dir}}/ca/os_ca"
    - cn: "Octavia CA"
      path: "{{state_dir}}/ca/octavia_ca"
  loop_control:
    label: "{{ item.cn }}"


#
# Now we create all required CSRs
#      
- name: Create certificate signing requests for client certificates 
  openssl_csr:
    path: "{{item.path}}.csr"    
    privatekey_path: "{{item.path}}.rsa"    
    common_name: "{{item.cn}}"
    organization_name: "{{item.o}}"
    basic_constraints: "CA:FALSE"
    basic_constraints_critical: true
    extended_key_usage: "clientAuth"
    key_usage: 
      - digitalSignature
      - keyEncipherment
    useCommonNameForSAN: false
  loop:
    - cn: "OpenStack client"    
      o: "OpenStack"
      path: "{{state_dir}}/os_certs/os_client"
  loop_control:
    label: "{{ item.cn }}"


- name: Create certificate signing requests for servers 
  openssl_csr:
    path: "{{item.path}}.csr"    
    privatekey_path: "{{item.path}}.rsa"    
    common_name: "{{item.cn}}"
    basic_constraints: "CA:FALSE"
    basic_constraints_critical: true
    useCommonNameForSAN: false
    subject_alt_name: 
      - IP:{{item.ip}}
  loop:
    - cn: "Nginx"
      path: "{{state_dir}}/os_certs/nginx"
      ip: "{{access_node_ip}}"
  loop_control:
    label: "{{ item.cn }}"


#
# Issue all certificates
#
- name: Create certificates from CSRs
  openssl_certificate:
    path: "{{item.path}}.crt"    
    csr_path: "{{item.path}}.csr"
    provider: ownca
    ownca_path: "{{state_dir}}/ca/{{item.ca}}.crt"
    ownca_privatekey_path: "{{state_dir}}/ca/{{item.ca}}.rsa"
  loop:
    - path: "{{state_dir}}/os_certs/os_client"
      ca: os_ca 
    - path: "{{state_dir}}/os_certs/nginx"
      ca: os_ca 
  loop_control:
    label: "{{ item.path }}"


- name: Combine client certificate and key in one PEM file 
  shell: |
    cat {{item.path}}.rsa  > {{item.path}}.pem
    cat {{item.path}}.crt >> {{item.path}}.pem
  loop:
    - path: "{{state_dir}}/os_certs/os_client"

- name: Read credentials
  include_vars:
    file: "{{state_dir}}/credentials/credentials.yaml"

- name: Create openrc files for k8s user and admin 
  vars:
    user: "{{item.user}}"
    password: "{{item.password}}"
    public_ip: "{{item.public_ip}}"
    project: "{{item.project}}"
  template:
    src: openrc.j2
    dest: "{{state_dir}}/credentials/{{item.user}}-openrc"
  loop:
    - user: admin
      project: admin
      password: "{{OS_ADMIN_PASSWORD}}"
      public_ip: "{{access_node_ip}}"
    - user: k8s
      project: k8s
      password: "{{OS_K8S_PASSWORD}}"
      public_ip: "{{access_node_ip}}"
  loop_control:
    label: "{{ item.user }}"




