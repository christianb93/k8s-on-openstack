---
worker_nodes:
    hosts:
{%  for node in worker_nodes.results %}
{%      set floating_ip =  ( floating_ips.results | selectattr("item", "equalto", node.server.name) | map(attribute='floating_ip') | list )[0].floating_ip_address  %}
{%      set node_ip = ( node.server.addresses[k8s_node_network.network_name] | selectattr("OS-EXT-IPS:type", "equalto", "fixed") | map(attribute='addr') | list)[0]  %}
{%      set port_id = ( worker_node_ports.results | map(attribute='port') | selectattr("name", "equalto", node.server.name+"-port") | map(attribute='id') | list)[0]   %}
       {{node.server.name}}:
            ansible_ssh_host: {{ floating_ip }}
            node_ip: {{ node_ip }}
            port_id: {{ port_id }}
            port_name: {{ node.server.name }}-port
            floating_ip: {{ floating_ip }}
            host_key_checking: false
            ansible_python_interpreter: /usr/bin/python3
            ansible_ssh_private_key_file: {{state_dir}}/ssh/os-default-key
            ansible_ssh_user: ubuntu
            ansible_ssh_common_args: >-
                -o StrictHostKeyChecking=no 
                -o UserKnownHostsFile=/dev/null 
                -o "ProxyCommand ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i {{os.install_node.ssh_key}} -W %h:%p {{os.install_node.user}}@{{os.install_node.ip}}" 
{%  endfor %}

master_nodes:
    hosts:
{%  for node in master_nodes.results %}
{%      set floating_ip =  ( floating_ips.results | selectattr("item", "equalto", node.server.name) | map(attribute='floating_ip') | list )[0].floating_ip_address  %}
{%      set node_ip = ( node.server.addresses[k8s_node_network.network_name] | selectattr("OS-EXT-IPS:type", "equalto", "fixed") | map(attribute='addr') | list)[0]  %}
        {{node.server.name}}:
            ansible_ssh_host: {{ floating_ip }}
            node_ip: {{ node_ip }}
            floating_ip: {{ floating_ip }}
            host_key_checking: false
            ansible_python_interpreter: /usr/bin/python3
            ansible_ssh_private_key_file: {{state_dir}}/ssh/os-default-key
            ansible_ssh_user: ubuntu
            ansible_ssh_common_args: >-
                -o StrictHostKeyChecking=no 
                -o UserKnownHostsFile=/dev/null 
                -o "ProxyCommand ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i {{os.install_node.ssh_key}} -W %h:%p {{os.install_node.user}}@{{os.install_node.ip}}" 
{%  endfor %}
install_nodes:
    hosts:
        install_node:
            ansible_ssh_host: {{os.install_node.ip}} #__install_node_ip__
            host_key_checking: false 
            ansible_python_interpreter: /usr/bin/python3
            ansible_ssh_private_key_file: {{os.install_node.ssh_key}}
            ansible_ssh_user: {{os.install_node.user}}

all:
    hosts:
    vars:
        os_router_id: {{os_router_output.id}}
        k8s_project_id: {{master_nodes.results[0].server.location.project.id}}
        external_network_id: {{os_router_output.router.external_gateway_info.network_id}}
        node_network_id: {{node_network.results[0].network.id}}
{% if create_kuryr_networks %}
{%    set kuryr_pod_subnet_id = ( kuryr_networks_output.results | map(attribute='subnet') | selectattr("name", "equalto", "kuryr-pod-subnet") | map(attribute='id') | list)[0]  %}
{%    set kuryr_service_subnet_id = ( kuryr_networks_output.results | map(attribute='subnet') | selectattr("name", "equalto", "kuryr-service-subnet") | map(attribute='id') | list)[0]  %}
        kuryr_pod_subnet_id: {{kuryr_pod_subnet_id}}
        kuryr_service_subnet_id: {{kuryr_service_subnet_id}}
        pod_security_group_id: {{pod_security_group.secgroup.id}}
{% endif %}
