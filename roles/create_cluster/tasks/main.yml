---
- name: Download base image
  get_url:
    dest: "/home/{{os.install_node.user}}/base.img"
    url: "{{base_image_url}}"
- name: Upload image into Glance 
  os_image:
    auth: "{{os.auth}}"
    auth_type: "password"
    name: "{{base_image_name}}"
    owner: "k8s"
    region_name: "{{os.region_name}}"
    state: present
    filename: "/home/{{os.install_node.user}}/base.img"

- name: Create node security group
  os_security_group:
    auth: "{{os.auth}}"      
    auth_type: password
    name: "node_security_group"    
    state: present
  register:
    node_security_group

- name: Create networks
  os_network:
    auth: "{{os.auth}}"
    auth_type: password
    external: no
    name: "{{item.network_name}}"
    shared: false
    state: present
  loop:
    - "{{k8s_node_network}}"
  register:
    node_network 

    
- name: If needed, create additional networks for Kuryr
  os_network:
    auth: "{{os.auth}}"
    auth_type: password
    external: no
    name: "{{item.network_name}}"
    shared: false
    state: present
  loop:
    - "{{kuryr_pod_network}}"
    - "{{kuryr_service_network}}"
  when: 
    create_kuryr_networks 

- name: Create subnets
  os_subnet:
    auth: "{{os.auth}}"
    auth_type: password
    enable_dhcp: yes
    gateway_ip: "{{item.gateway_ip}}"
    cidr: "{{item.cidr}}"
    network_name: "{{item.network_name}}"
    name: "{{item.subnet_name}}"
    state: present
    allocation_pool_start: "{{item.pool_start}}"
    allocation_pool_end:  "{{item.pool_end}}"
  loop:
    - "{{k8s_node_network}}"
  register:
    node_subnet

- name: Create additional subnets for Kuryr when needed
  os_subnet:
    auth: "{{os.auth}}"
    auth_type: password
    enable_dhcp: yes
    gateway_ip: "{{item.gateway_ip}}"
    cidr: "{{item.cidr}}"
    network_name: "{{item.network_name}}"
    name: "{{item.subnet_name}}"
    state: present
    enable_dhcp: "no"
    allocation_pool_start: "{{item.pool_start}}"
    allocation_pool_end:  "{{item.pool_end}}"
  loop:
    - "{{kuryr_pod_network}}"
    - "{{kuryr_service_network}}"
  when: 
    create_kuryr_networks 
  register: 
    kuryr_networks_output

- name: Create router 
  os_router:
    auth: "{{os.auth}}"
    auth_type: password
    interfaces:
      - "{{k8s_node_network.subnet_name}}"
    name: "{{k8s_node_network.router_name}}"
    network: "{{os.network.external_network_name}}"
  register: os_router_output
  when: 
    not create_kuryr_networks 

- name: Create router (with additional Kuryr networks)
  os_router:
    auth: "{{os.auth}}"
    auth_type: password
    interfaces:
      - "{{k8s_node_network.subnet_name}}"
      - "{{kuryr_pod_network.subnet_name}}"
      - "{{kuryr_service_network.subnet_name}}"
    name: "{{k8s_node_network.router_name}}"
    network: "{{os.network.external_network_name}}"
  register: os_router_output
  when: 
    create_kuryr_networks 

- name: Allow all traffic between nodes in the same security group
  os_security_group_rule:
    auth: "{{os.auth}}"
    auth_type: password
    direction: ingress
    remote_group: node_security_group
    security_group: node_security_group
    state: present
- name: Allow ICMP traffic for node security group 
  os_security_group_rule:
    auth: "{{os.auth}}"
    auth_type: password
    direction: ingress
    protocol: icmp
    remote_ip_prefix: "0.0.0.0/0"
    security_group: node_security_group
    state: present
- name: Allow SSH traffic for node security group 
  os_security_group_rule:
    auth: "{{os.auth}}"
    auth_type: password
    direction: ingress
    protocol: tcp
    port_range_max: "22"
    port_range_min: "22"
    remote_ip_prefix: "0.0.0.0/0"
    security_group: node_security_group
    state: present        
- name: Allow access to the Kubernetes API server 
  os_security_group_rule:
    auth: "{{os.auth}}"
    auth_type: password
    direction: ingress
    protocol: tcp
    port_range_max: "6443"
    port_range_min: "6443"
    remote_ip_prefix: "0.0.0.0/0"
    security_group: node_security_group
    state: present        


- name: Create master node
  os_server:
    auth: "{{os.auth}}"      
    auth_type: password
    name: "{{item}}"
    auto_ip: no
    flavor: "{{os.machine_templates.master_nodes.flavor}}"
    image: "{{os.machine_templates.master_nodes.image}}"
    key_name: "os-default-key"
    nics:
      - net-name: "{{k8s_node_network.network_name}}"
    security_groups:
      - "node_security_group"
  loop:
    - master
  register: master_nodes

- name: Create Neutron ports for worker nodes
  os_port:
    auth: "{{os.auth}}"      
    auth_type: password
    name: "{{item}}-port"
    state: present
    network: "{{node_network.results[0].network.id}}"
    port_security_enabled: yes
    region_name: "{{os.region_name}}"
    security_groups:
      - "node_security_group"
  loop:
    - worker1
    - worker2
  register:
    worker_node_ports

- name: Create worker nodes
  os_server:
    auth: "{{os.auth}}"      
    auth_type: password
    name: "{{item}}"
    auto_ip: no
    flavor: "{{os.machine_templates.worker_nodes.flavor}}"
    image: "{{os.machine_templates.worker_nodes.image}}"
    key_name: "os-default-key"
    nics:
      - port-name: "{{item}}-port"
  loop:
    - worker1
    - worker2
  register: worker_nodes

- name: Create pod security group if Kuryr networks are requested
  os_security_group:
    auth: "{{os.auth}}"      
    auth_type: password
    name: "pod_security_group"    
    state: present
  when: 
    create_kuryr_networks
  register:
    pod_security_group

- name: If Kuryr is used, allow traffic from the service network to the pod network
  os_security_group_rule:
    auth: "{{os.auth}}"
    auth_type: password
    direction: ingress
    remote_ip_prefix: "{{kuryr_service_network.cidr}}"
    security_group: "pod_security_group"    
    state: present
  when: 
    create_kuryr_networks


- name: Associate floating IP addresses
  os_floating_ip:
    auth: "{{os.auth}}"      
    auth_type: password
    reuse: yes
    nat_destination: "{{k8s_node_network.network_name}}"
    network: "{{os.network.external_network_name}}"
    server: "{{item}}"
    state: present
    wait: yes
  loop:
    - worker1
    - worker2
    - master
  register: floating_ips


- name: Create inventory file 
  template:
    dest: "/home/{{os.install_node.user}}/cluster.yaml"
    src: cluster.yaml.j2
- name: Copy inventory file to localhost 
  fetch:
    flat: "yes"
    src: "/home/{{os.install_node.user}}/cluster.yaml"
    dest: "{{state_dir}}/config/cluster.yaml"

